#!/usr/bin/env python3

import os
import sys
import curses
import time
import locale
from threading import Lock
from functools import partial
from inspect import currentframe, getframeinfo
import re
import argparse

import rospy

from inertial_sense_ros.msg import GroundVehicle, InfieldCal
from inertial_sense_ros.srv import GroundVehicleCommand, InfieldCalCommand

parser = argparse.ArgumentParser(prog='inertial_sense_calibration_tool')
parser.add_argument('--allow-imu-zeroing', action='store_true', help='Allow IMU Zeroing')
args = parser.parse_args()

#log.write(f'@{getframeinfo(currentframe()).lineno}')

os.environ.setdefault('ESCDELAY', '25')

stdscr = None

log = None

locale.setlocale(locale.LC_ALL, '')

def curses_setup():
    global stdscr
    stdscr = curses.initscr()
    curses.noecho()
    curses.cbreak()
    stdscr.keypad(1)
    stdscr.nodelay(1)
    curses.curs_set(0)
    curses.start_color()
    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_RED, curses.COLOR_BLACK)

def curses_cleanup():
    global stdscr
    curses.nocbreak()
    stdscr.keypad(0)
    curses.echo()
    curses.endwin()

enum_keywords = ['GV_MODE_', 'GV_CMD_LEARNING_', 'GV_STATUS_', 'INFIELD_CAL_STATE_', 'INFIELD_CAL_STATUS_']

def load_header_file(filename):
    filename_ = None
    paths = [os.environ['PWD']]
    for path in os.environ['CMAKE_PREFIX_PATH'].split(':'):
        paths.append(path + '/include/inertial_sense_ros')
    for path in paths:
        if os.path.isfile(path + '/' + filename):
            filename_ = path + '/' + filename
            break
    if filename_ is None:
        raise Exception(f'Unable to Locate {filename}')
    print(f'Using Header File at {filename_}')
    with open(filename_, 'r', newline='') as f:
        for line in f:
            store = False
            for keyword in enum_keywords:
                store = store or keyword in line
            if store and '=' in line and not 'MASK' in line:
                line = ' '.join(line.split()).split(',')[0].replace(' ', '')
                name, value = line.split('=')
                globals()[name] = int(value, 16) if '0x' in value else int(value, 10)

load_header_file('data_sets.h')

updated = True

infield_cal_mtx = Lock()
infield_cal_state = None
infield_cal_status = None

def cbInfieldCal(msg):
    global updated, infield_cal_state, infield_cal_status
    with infield_cal_mtx:
        state_str = ''
        for var in dict(globals()):
            if 'INFIELD_CAL_STATE_' in var:
                if msg.state == globals()[var]:
                    #state_str += var.replace('INFIELD_CAL_STATE_', '') + ', '
                    state_str += var + ', '
        color = curses.color_pair(0)
        if 'SAVED_AND_FINISHED' in state_str:
            color = curses.color_pair(2)
        if 'SAMPLING' in state_str:
            color = curses.color_pair(3)
        if 'ERROR' in state_str:
            color = curses.color_pair(4)
        infield_cal_state = (f'Infield Calibration State: {msg.state} ({state_str[:-2]})', color)
        status_str = ''
        for var in dict(globals()):
            if 'INFIELD_CAL_STATUS_' in var:
                if 'DN' not in var and 'UP' not in var and 'OFFSET' not in var:
                    if msg.status & globals()[var]:
                        #status_str += var.replace('INFIELD_CAL_STATUS_', '') + ', '
                        status_str += var + ', '
                elif 'OFFSET' not in var:
                    axis = None
                    offset = None
                    for a in ['X', 'Y', 'Z']:
                        if f'_{a}_' in var:
                            axis = a
                            offset = globals()[f'INFIELD_CAL_STATUS_SAMPLE_{axis}_OFFSET']
                            break
                    if axis is not None:
                        if msg.status & (globals()[var] << offset):
                            #status_str += var.replace('INFIELD_CAL_STATUS_', '') + '_' + axis + ', '
                            status_str += var + '_' + axis + ', '
        color = curses.color_pair(0)
        infield_cal_status = (f'Infield Calibration Status: {msg.status} ({status_str[:-2]})', color)
        updated = True

infield_cal_disable_motion_detect = False
def toggle_infield_cal_disable_motion_detect():
    global updated, infield_cal_disable_motion_detect
    infield_cal_disable_motion_detect = False if infield_cal_disable_motion_detect else True
    updated = True

infield_cal_disable_require_vertical = False
def toggle_infield_cal_disable_require_vertical():
    global updated, infield_cal_disable_require_vertical
    infield_cal_disable_require_vertical = False if infield_cal_disable_require_vertical else True
    updated = True

ground_vehicle_mtx = Lock()
ground_vehicle_mode = None
ground_vehicle_status = None

def cbGroundVehicle(msg):
    global updated, ground_vehicle_mode, ground_vehicle_status
    with ground_vehicle_mtx:
        mode_str = ''
        for var in dict(globals()):
            if 'GV_MODE_' in var:
                if msg.mode == globals()[var]:
                    #mode_str += var.replace('GV_MODE_', '') + ', '
                    mode_str += var + ', '
        color = curses.color_pair(0)
        if 'LEARNING' in mode_str:
            color = curses.color_pair(3)
        ground_vehicle_mode = (f'Ground Vehicle Mode: {msg.mode} ({mode_str[:-2]})', color)
        status_str = ''
        for var in dict(globals()):
            if 'GV_STATUS_' in var:
                if msg.status & globals()[var]:
                    #status_str += var.replace('GV_STATUS_', '') + ', '
                    status_str += var + ', '
        color = curses.color_pair(0)
        if 'LEARNING_CONVERGED' in status_str:
            color = curses.color_pair(2)
        elif 'LEARNING_ENABLED' in status_str:
            color = curses.color_pair(3)
        elif 'LEARNING_NEEDED' in status_str:
            color = curses.color_pair(4)
        ground_vehicle_status = (f'Ground Vehicle Status: {msg.status} ({status_str[:-2]})', color)
        updated = True

def sendInfieldCalCommand(state):
    infield_cal_command = rospy.ServiceProxy('/inertial_sense/infield_cal_command', InfieldCalCommand)
    state = state | (globals()['INFIELD_CAL_STATE_CMD_INIT_OPTION_DISABLE_MOTION_DETECT'] if infield_cal_disable_motion_detect else 0)
    state = state | (globals()['INFIELD_CAL_STATE_CMD_INIT_OPTION_DISABLE_REQUIRE_VERTIAL'] if infield_cal_disable_require_vertical else 0)
    resp = infield_cal_command(state)
    if resp.message != '':
        log.write(f'sendInfieldCalCommand: {resp.message}\n')
    return resp.success

def sendGroundVehicleCommand(mode):
    ground_vehicle_command = rospy.ServiceProxy('/inertial_sense/ground_vehicle_command', GroundVehicleCommand)
    resp = ground_vehicle_command(mode)
    if resp.message != '':
        log.write(f'sendGroundVehicleCommand: {resp.message}\n')
    return resp.success

menu_selected = 'top-level'

def change_menu_selected(key):
    global menu_selected
    menu_selected = key

def quit():
    raise Exception('Quit')

is_avail = '' if args.allow_imu_zeroing else ' (UNAVAILABLE)'

menus = {}
menus['top-level'] = {
    'title': 'Main Menu',
    'entries': [
        ('Run Infield Calibration', partial(change_menu_selected, 'top-level-infield-cal')),
        ('Run Ground Vehicle Learning', partial(change_menu_selected, 'top-level-ground-vehicle')),
        ('Exit', partial(quit))
    ]
}
menus['top-level-infield-cal'] = {
    'title': 'Infield Calibration Menu',
    'entries': [
        ('Off', partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_OFF'])),
        ('Zero IMU' + is_avail, partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_INIT_ZERO_IMU']) if args.allow_imu_zeroing else None),
        ('Zero Gyro' + is_avail, partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_INIT_ZERO_GYRO']) if args.allow_imu_zeroing else None),
        ('Zero Accel' + is_avail, partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_INIT_ZERO_ACCEL']) if args.allow_imu_zeroing else None),
        ('Zero Attitude', partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_INIT_ZERO_ATTITUDE'])),
        ('Zero Attitude & IMU' + is_avail, partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_INIT_ZERO_ATTITUDE_IMU']) if args.allow_imu_zeroing else None),
        ('Zero Attitude & Gyro' + is_avail, partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_INIT_ZERO_ATTITUDE_GYRO']) if args.allow_imu_zeroing else None),
        ('Zero Attitude & Accel' + is_avail, partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_INIT_ZERO_ATTITUDE_ACCEL']) if args.allow_imu_zeroing else None),
        ('Start Sampling for 5 Seconds', partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_START_SAMPLE'])),
        ('Save & Finish', partial(sendInfieldCalCommand, globals()['INFIELD_CAL_STATE_CMD_SAVE_AND_FINISH'])),
        ('Toggle Motion Detect', toggle_infield_cal_disable_motion_detect),
        ('Toggle Require Vertical', toggle_infield_cal_disable_require_vertical),
        ('Back to Main Menu', partial(change_menu_selected, 'top-level'))
    ]
}
menus['top-level-ground-vehicle'] = {
    'title': 'Ground Vehicle Learning Menu',
    'entries': [
        ('Start', partial(sendGroundVehicleCommand, globals()['GV_CMD_LEARNING_START'])),
        ('Resume', partial(sendGroundVehicleCommand, globals()['GV_CMD_LEARNING_RESUME'])),
        ('Clear & Start', partial(sendGroundVehicleCommand, globals()['GV_CMD_LEARNING_CLEAR_AND_START'])),
        ('Stop & Save', partial(sendGroundVehicleCommand, globals()['GV_CMD_LEARNING_STOP_AND_SAVE'])),
        ('Cancel', partial(sendGroundVehicleCommand, globals()['GV_CMD_LEARNING_CANCEL'])),
        ('Back to Main Menu', partial(change_menu_selected, 'top-level'))
    ]
}

def main():
    global stdscr, updated, menu_selected

    rospy.init_node('inertial_sense_calibration_tool')
    rospy.Subscriber('/inertial_sense/ground_vehicle', GroundVehicle, cbGroundVehicle)
    rospy.Subscriber('/inertial_sense/infield_cal', InfieldCal, cbInfieldCal)
    rate = rospy.Rate(100)

    height,width = stdscr.getmaxyx()
    win = curses.newwin(height,width)
    pad_height = int(height / 2)
    pad_width  = width
    pad = curses.newpad(pad_height,pad_width)
    pad2 = curses.newpad(pad_height,pad_width)

    max_height = 0
    mypad_pos = 0

    selection = 0

    menu = None

    while not rospy.is_shutdown():

        if menu is None or menu['title'] != menus[menu_selected]['title']:
            menu = menus[menu_selected]
            selection = 0
            updated = True

        cmd = stdscr.getch()
        if cmd == curses.KEY_DOWN:
            if selection < len(menu['entries']) - 1:
                selection += 1
            updated = True
        elif cmd == curses.KEY_UP:
            if selection > 0:
                selection -= 1
            updated = True
        elif cmd == curses.KEY_ENTER or cmd == 10 or cmd == 13:
            description, action = menu['entries'][selection]
            if callable(action):
                action()
                continue
        elif cmd == 27: # Esc or Alt
            n = stdscr.getch()
            if n == -1: # Escape
                if menu_selected == 'top-level':
                    quit()
                else:
                    menu_selected = 'top-level'
                    continue
        elif cmd == ord('q'):
            quit()

        if updated:

            ####
            pad.move(0,0)
            pad.addstr(0,0, f"{menu['title']}:", curses.color_pair(0))
            pad.clrtoeol()
            for i in range(0, len(menu['entries'])):
                description, action = menu['entries'][i]
                if description == 'Toggle Motion Detect':
                    description = f"Toggle Motion Detect ({'DISABLED' if infield_cal_disable_motion_detect is True else 'ENABLED'})"
                if description == 'Toggle Require Vertical':
                    description = f"Toggle Require Vertical ({'DISABLED' if infield_cal_disable_require_vertical is True else 'ENABLED'})"
                if i != selection:
                    pad.addstr(i+1,0, description, curses.color_pair(0))
                else:
                    pad.addstr(i+1,0, description, curses.color_pair(1))
                pad.clrtoeol()
            pad.clrtobot()
            pad.refresh(mypad_pos,0, 0,0, height-1,width-1)
            if max_height < len(menu['entries']):
                max_height = len(menu['entries'])

            ####
            pad2.move(0,0)
            info = []
            if menu_selected == 'top-level-infield-cal':
                with infield_cal_mtx:
                    info.append(infield_cal_state)
                    info.append(infield_cal_status)
            if menu_selected == 'top-level-ground-vehicle':
                with ground_vehicle_mtx:
                    info.append(ground_vehicle_mode)
                    info.append(ground_vehicle_status)
            for i in range(0, len(info)):
                description, color = info[i]
                pad2.addstr(i,0, description, color)
                pad2.clrtoeol()
            pad2.clrtobot()
            pad2.refresh(0,0, pad_height+1,0, height-1,width-1)

            updated = False

        rate.sleep()

if __name__ == "__main__":
    semaphore_file = '/tmp/.cal_tool_active'
    f = open(semaphore_file, 'w')
    log = open('log.txt', 'w')
    if False:
        for var in dict(globals()):
            for keyword in enum_keywords:
                if keyword in var:
                    print((var, globals()[var], hex(globals()[var])))
        exit()
    curses_setup()
    try:
        main()
    except curses.error as err:
        log.write(f'Curses Error: {err}')
        pass
    except Exception as err:
        if str(err) != "Quit":
            log.write(f'Error: {err}')
        pass
    except rospy.ROSInterruptException:
        pass
    curses_cleanup()
    log.close()
    f.close()
    os.remove(semaphore_file)
